from aiogram import *
from modules import siteparser, dbcontrol
import pyowm
import requests
import os
from pyowm.utils.config import get_default_config
import asyncio
from fuzzywuzzy import fuzz


class RangeNumberInLineButton(types.InlineKeyboardMarkup):
    def __init__(self, numbers):
        super().__init__()
        for number in numbers:
            self.add(types.InlineKeyboardButton(text=str(number), callback_data=str(number)))


class RangeNumberReplyButton(types.ReplyKeyboardMarkup):
    def __init__(self, numbers):
        super().__init__()
        for number in numbers:
            self.add(types.KeyboardButton(text=str(number)))


class SchoolBot(Bot):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
    """

    def __init__(self, token: str, owm_token: str):
        super().__init__(token)

        # —Ä–∞–∑–¥–µ–ª—ã
        self.__dirs = {
            'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ': RangeNumberReplyButton(['üìö–®–∫–æ–ª–∞üìö', 'üé≤–ü—Ä–æ—á–µ–µüé≤', 'üë§–ê–∫–∫–∞—É–Ω—Çüë§', '‚ùì–ü–æ–º–æ—â—å‚ùì']),

            'üë§–ê–∫–∫–∞—É–Ω—Çüë§': RangeNumberReplyButton(
                ['üìÇ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìÇ', 'üî¢–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üî¢', 'üî°–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞üî°', 'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ']),

            'üìö–®–∫–æ–ª–∞üìö': RangeNumberReplyButton(
                ['üìÉ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÉ', 'üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞', 'üìò–î–æ–ø –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìò', 'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ']),

            '‚ùì–ü–æ–º–æ—â—å‚ùì': RangeNumberReplyButton(('‚öôÔ∏è–ö–æ–º–∞–Ω–¥—ã‚öôÔ∏è', 'üí¨–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨', '¬©Ô∏èGitHub¬©Ô∏è',
                                                'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ')),

            'üé≤–ü—Ä–æ—á–µ–µüé≤': RangeNumberReplyButton(
                ['üå§–ü–æ–≥–æ–¥–∞üå§', 'üò∫–ö–æ—Ç–∏–∫–∏üò∫', '‚òùÔ∏è–¶–∏—Ç–∞—Ç—ã‚òùÔ∏è', 'ü¶†COVID-19ü¶†', 'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ']),
        }
        self.__subjects = ('–§–∏–∑–∏–∫–∞', '–ê–ª–≥–µ–±—Ä–∞', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞')

        # txt —Ñ–∞–π–ª—ã
        self.__question_files = ('school_site',
                                 'how_to_connect_to_lesson')
        # –ø–æ–≥–æ–¥–Ω–∏–∫
        presets = get_default_config()
        presets['language'] = 'ru'
        self.__owm = pyowm.OWM(owm_token, presets)

        # –±–æ—Ç
        self.__dp = Dispatcher(self)
        self.__eventloop = asyncio.get_event_loop()

    @staticmethod
    def __compare(string: str, obj, percent: int):
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        """
        for i in obj:
            if fuzz.ratio(string, i) >= percent:
                return True
        return False

    async def __request_banner(self, cool_down: int = 60, max_requests: int = 30):
        while True:
            db = dbcontrol.DBcontrol()
            counter = 0

            for member in db.get_all_users(skip_banned=True):

                if member.info['sent_messages_per_minute'] >= max_requests:
                    member.ban()
                    with open('media/text/help/on_ban_message.txt', encoding='utf-8') as f:
                        await self.send_message(member.info['id'], f.read(), parse_mode='Markdown')

                    counter += 1

                member.set_user_sent_messages_per_minute(0)

            print(f'[BAN-LOG] –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—â–∏—Ç—É –æ—Ç DDoS\'–∞, –∑–∞–±–∞–Ω–µ–Ω–æ {counter} –∑–∞–ø–∏—Å–µ–π')

            await asyncio.sleep(cool_down)

    @staticmethod
    async def __web_updater(update_time: int = 60):
        while True:
            print('[WEB-LOG] –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...')
            news = siteparser.News()
            covid19 = siteparser.Covid19().getinfo()

            with open('media/text/web/news.txt', 'w') as f:
                f.write(f'*{news.get_last_news_title()}*\n\n{news.get_last_news_text()}')

            with open('media/text/web/covid.txt', 'w', encoding='utf-8') as f:
                f.write(f"*ü¶†COVIDü¶†*\n\nü§í–ó–∞–±–æ–ª–µ–ª–æ: *{covid19['all_infected']}* —á–µ–ª–æ–≤–µ–∫.\n"
                        f"üòµ–£–º–µ—Ä–ª–æ: *{covid19['all_died']}* —á–µ–ª–æ–≤–µ–∫.\n"
                        f"üòé–í—ã–ª–µ—á–∏–ª–æ—Å—å: *{covid19['all_healed']}* —á–µ–ª–æ–≤–µ–∫.\n"
                        f"ü§í–ó–∞—Ä–∞–∑–∏–ª–æ—Å—å –∑–∞ –¥–µ–Ω—å: *{covid19['last_infected']}* —á–µ–ª–æ–≤–µ–∫.\n\n"
                        "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ –Ω–æ—Å–∏—Ç–µ –º–∞—Å–∫—É!*")

            print('[WEB-LOG] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            del news, covid19
            await asyncio.sleep(update_time)

    @staticmethod
    def __permissions(admin_only: bool = False, logging: bool = False):
        async def nothing():
            pass

        def dec(func):
            def checker(message: types.Message):
                try:
                    user = dbcontrol.User(message.from_user.id)

                    if admin_only:
                        if user.info['admin_status']:
                            data = func(message)
                        else:
                            data = nothing()

                    elif not user.info['ban_status']:
                        user.set_user_sent_messages_per_minute(user.info['sent_messages_per_minute'] + 1)
                        data = func(message)

                    else:
                        data = nothing()

                    if logging and not user.info['ban_status']:
                        print(f'[CHAT-LOG] <id={message.from_user.id}> '
                              f'<Telegram=@{message.from_user.username}> '
                              f'<user_name={user.info["user_name"]}> '
                              f'<admin={user.info["admin_status"]}> '
                              f'<ban={user.info["ban_status"]}> '
                              f'<text={message.text}> ')
                except IndexError:
                    return nothing()

                return data
            return checker
        return dec

    def run(self):
        @self.__dp.message_handler(commands=['start'])
        async def start_message(message: types.Message):
            db = dbcontrol.DBcontrol()
            if not db.user_exists(message.from_user.id):

                db.add_user(message.from_user.id)

                with open("media/text/help/hello_message.txt", encoding="utf-8") as f:
                    await message.answer(f.read().replace("%name%", message.from_user.first_name),
                                         reply_markup=self.__dirs['üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ'], parse_mode='Markdown')
            else:
                await message.answer("–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üôÇ", reply_markup=self.__dirs['üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ'])

        @self.__dp.message_handler(commands=['ban'])
        @self.__permissions(admin_only=True, logging=True)
        async def ban_command(message: types.Message):
            try:

                user_id = message.text.split(' ')[1]
                status = message.text.split(' ')[2]
                dbcontrol.User(int(user_id)).ban(True if status.lower() == 'true' else False)

                await message.answer("‚úÖ–£—Å–ø–µ—Ö‚úÖ")

            except IndexError:
                await message.answer("‚õî–ü—Ä–æ—Ä—É—â–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç!‚õî")

        @self.__dp.message_handler(commands=['find'])
        @self.__permissions(logging=True)
        async def find_command(message: types.Message):
            db = dbcontrol.DBcontrol()
            try:
                user_id = db.get_user_id_by_name(message.text.split(' ')[1])

                if not user_id:
                    await message.answer("‚õî–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!‚õî")
                    return

                await self.get_chat_member(user_id, user_id)

                user = dbcontrol.User(user_id)
                await message.answer(f"*–ü–†–û–°–ú–û–¢–† –ü–†–û–§–ò–õ–Ø*\n\n"
                                     f"*–ò–ú–Ø:* {user.info['user_name']}\n"
                                     f"*ID:* `{user.info['id']}`\n"
                                     f"*–ö–õ–ê–°–°:* {user.info['class_number']}-{user.info['class_char']}\n\n"
                                     f"*–ê–î–ú–ò–ù:* {'‚úÖ' if user.info['admin_status'] else '‚ùå'}\n"
                                     f"*–ë–õ–û–ö–ò–†–û–í–ö–ê:* {'‚ùå' if not user.info['ban_status'] else '‚úÖ'}\n\n"
                                     f"*–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù*: `{user.info['reg_date']}`",
                                     parse_mode='Markdown')

            except IndexError:
                await message.answer("‚õî–ü—Ä–æ—Ä—É—â–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç!‚õî")

        @self.__dp.message_handler(commands=['db'])
        @self.__permissions(admin_only=True, logging=True)
        async def dump_db(message: types.Message):
            try:

                with open(f"data_bases/{message.text.split(' ')}", 'rb') as f:
                    await message.answer_document(message.chat.id, f)

            except FileNotFoundError:
                await message.answer('‚õî–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö  –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞‚õî')

            except IndexError:
                await message.answer('‚õî–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞‚õî')

        @self.__dp.message_handler(commands=['post'])
        @self.__permissions(admin_only=True, logging=True)
        async def post(message: types.Message):
            counter = 0
            db = dbcontrol.DBcontrol()
            members = db.get_all_users(skip_banned=True)

            try:
                await message.answer('‚è∫–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É‚è∫')
                for member in members:
                    try:
                        await self.send_message(member.info['id'], message.text[6:], parse_mode='Markdown')
                        counter += 1
                        await asyncio.sleep(0.1)

                    except Exception as e:
                        print(f'[ERROR] {e}')

                await message.answer(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {counter}/{len(members)}")

            except KeyError:
                await message.answer(f'‚õî–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤‚õî')

        @self.__dp.message_handler(commands=['set_name'])
        @self.__permissions(logging=True)
        async def set_name(message: types.Message):
            try:
                nick = message.text.split(' ')[1]

                if len(nick) < 15:

                    if dbcontrol.User(message.from_user.id).set_user_name(nick):
                        await message.answer("‚úÖ–£—Å–ø–µ—Ö‚úÖ")
                    else:
                        await message.answer("‚ö†–≠—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ‚ö†")
                else:
                    await message.answer('‚ö†–≠—Ç–æ –∏–º—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ‚ö†')

            except IndexError:
                await message.answer("‚õî–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞‚õî")

        @self.__dp.message_handler(commands=['admin'])
        @self.__permissions(admin_only=True, logging=True)
        async def set_admin(message: types.Message):
            try:
                dbcontrol.User(int(message.text.split(' ')[1])).admin(
                    True if message.text.split(' ')[2].lower() == 'true' else False)
                await message.answer("‚úÖ–£—Å–ø–µ—Ö‚úÖ")

            except IndexError:
                await message.answer("‚õî–ü—Ä–æ–ø—É—â–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç!‚õî")

        @self.__dp.message_handler(commands=['ask'])
        @self.__permissions(logging=True)
        async def ask_command(message: types.Message):
            text = message.text[4:]

            for file in self.__question_files:
                with open(f'media/text/questions/{file}.txt', encoding='utf-8') as f:
                    if self.__compare(text, f.read().split('\n'), 60):
                        with open(f'media/text/questions/{file}_answer.txt', encoding='utf-8') as f2:
                            await message.answer(f2.read(), parse_mode='Markdown')
                        return
            await message.answer('–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç üò¢')

        @self.__dp.message_handler(commands=['set_city'])
        @self.__permissions(logging=True)
        async def set_city_command(message: types.Message):
            try:
                city = message.text[10:]

                if city:
                    dbcontrol.User(message.from_user.id).set_city(city)
                else:
                    await message.answer("‚õî–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞‚õî")
            except Exception as e:
                print(e)

        @self.__dp.callback_query_handler()
        async def callback_inline(call: types.CallbackQuery):
            user = dbcontrol.User(call.from_user.id)

            if call.data in ('9', '10', '11'):
                user.set_class_number(int(call.data))
                await call.answer('‚úÖ–ò–∑–º–µ–Ω–µ–Ω–æ‚úÖ')

            elif call.data in '–ê–ë–í–ì–î–õ–ú–ò–°–≠':
                user.set_class_char(call.data)
                await call.answer('‚úÖ–ò–∑–º–µ–Ω–µ–Ω–æ‚úÖ')

            elif call.data in self.__subjects:
                try:
                    await call.answer('üì∂–ó–∞–≥—Ä—É–∂–∞—éüì∂')
                    with open(f'media/files/–∫–ª–∞—Å—Å—ã/{user.info["class_number"]}/–¥–æ–ø –º–∞—Ç–µ—Ä–∏–∞–ª—ã/{call.data.lower()}/'
                              f'{call.data.lower()}.zip', 'rb') as f:
                        await self.send_document(call.from_user.id, f)

                except FileNotFoundError:
                    await call.answer("üòì–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ωüòì")

                except ConnectionError:
                    await call.answer('‚ö†–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚ö†')
            else:
                pass

        @self.__dp.message_handler(content_types=['text'])
        @self.__permissions(logging=True)
        async def handle_message(message: types.Message):

            if message.text == 'üìÉ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÉ':
                user = dbcontrol.User(message.from_user.id)
                try:
                    with open(
                            f'media/files/–∫–ª–∞—Å—Å—ã/{user.info["class_number"]}/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/{user.info["class_char"]}.jpg',
                            'rb') as f:
                        await message.answer_photo(f)

                except FileNotFoundError:
                    await message.answer('üòß–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞'
                                         f' {user.info["class_number"]}-{user.info["class_char"]} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ!üòß')

            elif message.text == 'üìö–®–∫–æ–ª–∞üìö':
                await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìö–®–∫–æ–ª–∞üìö¬ª.', reply_markup=self.__dirs[message.text])

            elif message.text == 'üîÑ–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüîÑ':
                await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=self.__dirs[message.text])

            elif message.text == 'üì∞–ù–æ–≤–æ—Å—Ç–∏üì∞':
                with open('media/text/web/news.txt', 'r') as f:
                    await message.answer(f.read(), parse_mode='Markdown')

            elif message.text == 'üé≤–ü—Ä–æ—á–µ–µüé≤':
                await message.answer('–í –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üé≤–ü—Ä–æ—á–µ–µüé≤¬ª.', reply_markup=self.__dirs[message.text])

            elif message.text == 'üå§–ü–æ–≥–æ–¥–∞üå§':
                try:
                    city = str(dbcontrol.User(message.from_user.id).info['city'])
                    w = self.__owm.weather_manager().weather_at_place(city).weather

                    await message.answer(f"*–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ \"{city}\"*\n\n"
                                         f"*–°—Ç–∞—Ç—É—Å:* {w.detailed_status}\n"
                                         f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {w.temperature('celsius')['temp']} ‚ÑÉ\n"
                                         f"*–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {w.wind()['speed']} –º\\—Å\n"
                                         f"*–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {w.humidity}%\n*–û–±–ª–∞—á–Ω–æ—Å—Ç—å:* {w.clouds}%",
                                         parse_mode='Markdown')

                except Exception as e:
                    await message.answer(f'‚õî{e}‚õî')

            elif message.text == 'ü¶†COVID-19ü¶†':
                with open('media/text/web/covid.txt', 'r', encoding='utf-8') as f:
                    await message.answer(f.read(), parse_mode='Markdown')

            elif message.text == 'üò∫–ö–æ—Ç–∏–∫–∏üò∫':
                try:

                    with open(f'{message.chat.id}.jpg', 'wb') as f:
                        f.write(requests.get('https://thiscatdoesnotexist.com/').content)

                    with open(f'{message.chat.id}.jpg', 'rb') as f:
                        await message.answer_photo(f)

                    os.remove(f'{message.chat.id}.jpg')
                except PermissionError:
                    await message.answer("‚õî–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!‚õî")

            elif message.text == '‚ùì–ü–æ–º–æ—â—å‚ùì':
                await message.answer(f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´{message.text}¬ª', reply_markup=self.__dirs[message.text])

            elif message.text == '‚öôÔ∏è–ö–æ–º–∞–Ω–¥—ã‚öôÔ∏è':
                with open('media/text/help/commands_help.txt', 'r', encoding="utf-8") as f:
                    await message.answer(f.read(), parse_mode='Markdown')

            elif message.text == '¬©Ô∏èGitHub¬©Ô∏è':
                with open('media/text/help/github.txt', 'r', encoding="utf-8") as f:
                    await message.answer(f.read(), parse_mode='Markdown')

            elif message.text == 'üí¨–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨':
                with open('media/text/help/contacts.txt', 'r', encoding="utf-8") as f:
                    await message.answer(f.read(), parse_mode='Markdown')

            elif message.text == '‚òùÔ∏è–¶–∏—Ç–∞—Ç—ã‚òùÔ∏è':
                site = siteparser.Quotes()
                await message.answer(f'{site.get_quote_message()}\n\n*{site.get_author()}*', parse_mode="Markdown")

            elif message.text == 'üë§–ê–∫–∫–∞—É–Ω—Çüë§':
                await message.answer(f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´{message.text}¬ª', reply_markup=self.__dirs[message.text])

            elif message.text == 'üìÇ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìÇ':
                user = dbcontrol.User(message.from_user.id)
                await message.answer(f"*–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–ö–ö–ê–£–ù–¢–ï*\n\n"
                                     f"*–ò–º—è:* {user.info['user_name']}\n"
                                     f"*ID:* {user.info['id']}\n"
                                     f"*–ö–ª–∞—Å—Å:* {user.info['class_number']}-{user.info['class_char']}\n"
                                     f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* `{user.info['reg_date']}`\n"
                                     f"*–ì–æ—Ä–æ–¥:* {user.info['city']}\n"
                                     f"*–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {'‚úÖ' if user.info['admin_status'] else '‚ùå'}\n"
                                     f"*–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:* {'‚ùå' if not user.info['ban_status'] else '‚ö†'}\n",
                                     parse_mode='Markdown')

            elif message.text == 'üî¢–ù–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞üî¢':
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å', reply_markup=RangeNumberInLineButton(range(9, 12)))

            elif message.text == 'üìò–î–æ–ø –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìò':
                await message.answer("üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Çüëá", reply_markup=RangeNumberInLineButton(self.__subjects))

            elif message.text == 'üî°–ë—É–∫–≤–∞ –∫–ª–∞—Å—Å–∞üî°':
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ  –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=RangeNumberInLineButton('–ê–ë–í–ì–î–õ–ú–ò–°–≠'))

        self.__eventloop.create_task(self.__request_banner(10, 10))
        self.__eventloop.create_task(self.__web_updater(360))

        executor.start_polling(self.__dp, skip_updates=True)
